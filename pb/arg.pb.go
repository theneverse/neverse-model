// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arg.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Arg_Type int32

const (
	Arg_I32    Arg_Type = 0
	Arg_I64    Arg_Type = 1
	Arg_U32    Arg_Type = 2
	Arg_U64    Arg_Type = 3
	Arg_F32    Arg_Type = 4
	Arg_F64    Arg_Type = 5
	Arg_String Arg_Type = 6
	Arg_Bytes  Arg_Type = 7
	Arg_Bool   Arg_Type = 8
)

var Arg_Type_name = map[int32]string{
	0: "I32",
	1: "I64",
	2: "U32",
	3: "U64",
	4: "F32",
	5: "F64",
	6: "String",
	7: "Bytes",
	8: "Bool",
}

var Arg_Type_value = map[string]int32{
	"I32":    0,
	"I64":    1,
	"U32":    2,
	"U64":    3,
	"F32":    4,
	"F64":    5,
	"String": 6,
	"Bytes":  7,
	"Bool":   8,
}

func (x Arg_Type) String() string {
	return proto.EnumName(Arg_Type_name, int32(x))
}

func (Arg_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4371b204df3ab2da, []int{0, 0}
}

type Arg struct {
	Type    Arg_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.Arg_Type" json:"type,omitempty"`
	IsArray bool     `protobuf:"varint,2,opt,name=is_array,json=isArray,proto3" json:"is_array,omitempty"`
	Value   []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Arg) Reset()         { *m = Arg{} }
func (m *Arg) String() string { return proto.CompactTextString(m) }
func (*Arg) ProtoMessage()    {}
func (*Arg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4371b204df3ab2da, []int{0}
}
func (m *Arg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arg.Merge(m, src)
}
func (m *Arg) XXX_Size() int {
	return m.Size()
}
func (m *Arg) XXX_DiscardUnknown() {
	xxx_messageInfo_Arg.DiscardUnknown(m)
}

var xxx_messageInfo_Arg proto.InternalMessageInfo

func (m *Arg) GetType() Arg_Type {
	if m != nil {
		return m.Type
	}
	return Arg_I32
}

func (m *Arg) GetIsArray() bool {
	if m != nil {
		return m.IsArray
	}
	return false
}

func (m *Arg) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.Arg_Type", Arg_Type_name, Arg_Type_value)
	proto.RegisterType((*Arg)(nil), "pb.Arg")
}

func init() { proto.RegisterFile("arg.proto", fileDescriptor_4371b204df3ab2da) }

var fileDescriptor_4371b204df3ab2da = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x24, 0xcf, 0x3f, 0x6a, 0x85, 0x40,
	0x10, 0xc7, 0x71, 0xc7, 0xff, 0x6f, 0x78, 0x84, 0x61, 0x48, 0x61, 0x9a, 0x45, 0x5e, 0x65, 0x65,
	0xa1, 0x62, 0xaf, 0x45, 0x20, 0xad, 0x49, 0xca, 0x10, 0x14, 0x44, 0x84, 0x47, 0x5c, 0x56, 0x13,
	0xf0, 0x16, 0xb9, 0x4d, 0xae, 0x90, 0xd2, 0x32, 0x65, 0xd0, 0x8b, 0x84, 0xdd, 0x74, 0x9f, 0x2f,
	0xc3, 0x14, 0x3f, 0x3c, 0xb5, 0x6a, 0x48, 0xa5, 0x9a, 0x96, 0x89, 0x6d, 0xd9, 0x5d, 0xbe, 0x00,
	0x9d, 0x4a, 0x0d, 0x1c, 0xa3, 0xbb, 0xac, 0xb2, 0x8f, 0x20, 0x86, 0xe4, 0x26, 0x3b, 0xa7, 0xb2,
	0x4b, 0x2b, 0x35, 0xa4, 0x4f, 0xab, 0xec, 0x1b, 0x73, 0xe1, 0x3b, 0x0c, 0xc7, 0xf9, 0xb5, 0x55,
	0xaa, 0x5d, 0x23, 0x3b, 0x86, 0x24, 0x6c, 0x82, 0x71, 0xae, 0x74, 0xf2, 0x2d, 0x7a, 0x1f, 0xed,
	0xf5, 0xbd, 0x8f, 0x9c, 0x18, 0x92, 0x73, 0xf3, 0x1f, 0x97, 0x17, 0x74, 0xf5, 0x3b, 0x07, 0xe8,
	0x3c, 0xe4, 0x19, 0x59, 0x06, 0x65, 0x41, 0xa0, 0xf1, 0x9c, 0x67, 0x64, 0x1b, 0x94, 0x05, 0x39,
	0x1a, 0xf7, 0x79, 0x46, 0xae, 0x41, 0x59, 0x90, 0xc7, 0x88, 0xfe, 0xe3, 0xa2, 0xc6, 0xb7, 0x81,
	0x7c, 0x3e, 0xa1, 0x57, 0xaf, 0x4b, 0x3f, 0x53, 0xc0, 0x21, 0xba, 0xf5, 0x34, 0x5d, 0x29, 0xac,
	0xa3, 0xef, 0x5d, 0xc0, 0xb6, 0x0b, 0xf8, 0xdd, 0x05, 0x7c, 0x1e, 0xc2, 0xda, 0x0e, 0x61, 0xfd,
	0x1c, 0xc2, 0xea, 0x7c, 0x33, 0x2f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x56, 0xf1, 0x3c, 0x20,
	0xeb, 0x00, 0x00, 0x00,
}

func (m *Arg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintArg(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsArray {
		i--
		if m.IsArray {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintArg(dAtA []byte, offset int, v uint64) int {
	offset -= sovArg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Arg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArg(uint64(m.Type))
	}
	if m.IsArray {
		n += 2
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovArg(uint64(l))
	}
	return n
}

func sovArg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArg(x uint64) (n int) {
	return sovArg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Arg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Arg_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsArray", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsArray = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthArg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthArg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArg = fmt.Errorf("proto: unexpected end of group")
)
