syntax = "proto3";
package pb;

import "ibtp.proto";
import "bxh_transaction.proto";
import "offchain_transmission.proto";

message Empty {}

message InitializeRequest {
  string config_path = 1;
  bytes extra = 2;
  string mode = 3;
}

message SubmitIBTPResponse {
  bool status = 1;
  string message = 2;
  pb.IBTP result = 3;
}

//message SubmitIBTPResponses {
//  repeated SubmitIBTPResponse response = 1;
//}

message SubmitIBTPRequest {
  string from = 1;
  uint64 index =2;
  string serviceId = 3;
  pb.IBTP.Type type = 4;
  pb.content content = 5;
  pb.bxhProof bxhProof = 6;
  bool isEncrypted = 7;
}

message SubmitIBTPRequestBatch {
  repeated string from = 1;
  repeated uint64 index =2;
  repeated string serviceId = 3;
  repeated pb.IBTP.Type type = 4;
  repeated pb.content content = 5;
  repeated pb.bxhProof bxhProof = 6;
  repeated bool isEncrypted = 7;
}

message SubmitReceiptRequest {
  string to = 1;
  uint64 index =2;
  string serviceId = 3;
  pb.IBTP.Type type = 4;
  pb.result result = 5;
  pb.bxhProof bxhProof = 6;
}

message SubmitReceiptRequestBatch {
  repeated string to = 1;
  repeated uint64 index =2;
  repeated string serviceId = 3;
  repeated pb.IBTP.Type type = 4;
  repeated pb.result result = 5;
  repeated pb.bxhProof bxhProof = 6;
}

message QueryFilterLockStartRequest {
  uint64 appchainIndex = 1;
}

message QueryFilterLockStartResponse {
  uint64 lockStart = 1;
}

message GetMessageRequest {
  string servicePair = 1;
  uint64 idx = 2;
}

message GetMetaResponse {
  map<string, uint64> meta = 1;
}

message ServicesResponse {
  repeated string service = 1;
}

message ChainIDResponse {
  string bxhID = 1;
  string appchainID = 2;
}

message ChainInfoRequest {
  string chainID = 1;
}

message DirectTransactionMetaRequest {
  string IBTPid = 1;
}

message ChainInfoResponse {
  string broker = 1;
  bytes trustedRoot = 2;
  string ruleAddr = 3;
}

// transaction meta in direct mode
message DirectTransactionMetaResponse {
  uint64 startTimestamp = 1;
  uint64 timeoutPeriod = 2;
  uint64 transactionStatus = 3;
}

message NameResponse {
  string name = 1;
}

message TypeResponse {
  string type = 1;
}

message LockEvent {
  bytes receipt = 1;
  bytes proof = 2;
  uint64 appchainIndex = 3;
  uint64 blockNumber = 4;
}

message UpdateMeta {
  bytes meta = 1;
}

message UnLock {
  string token = 1;
  string from = 2;
  string receipt = 3;
  bytes  amount = 4;
  string txId = 5;
  uint64 relayIndex = 6;
  repeated bytes multiSigns = 7;
}

message QueryRelayIndexResponse {
  uint64 relayIndex = 1;
}
message QueryAppchainIndexResponse {
  uint64 appchainIndex = 1;
}
message QueryLockEventByIndexRequest {
  uint64 index = 1;
}

service AppchainPlugin {
  rpc Initialize(InitializeRequest) returns (Empty);
  rpc Start(Empty) returns (Empty);
  rpc Stop(Empty) returns (Empty);
  rpc GetIBTPCh(Empty) returns (stream pb.IBTP);
  rpc GetUpdateMeta(Empty) returns (stream UpdateMeta);
  rpc SubmitIBTP(SubmitIBTPRequest) returns (SubmitIBTPResponse);
  rpc SubmitIBTPBatch(SubmitIBTPRequestBatch) returns (SubmitIBTPResponse);
  rpc SubmitReceipt(SubmitReceiptRequest) returns (SubmitIBTPResponse);
  rpc SubmitReceiptBatch(SubmitReceiptRequestBatch) returns (SubmitIBTPResponse);
  rpc GetOutMessage(GetMessageRequest) returns (pb.IBTP);
  rpc GetReceiptMessage(GetMessageRequest) returns (pb.IBTP);
  rpc GetInMeta(Empty) returns (GetMetaResponse);
  rpc GetOutMeta(Empty) returns (GetMetaResponse);
  rpc GetCallbackMeta(Empty) returns (GetMetaResponse);
  rpc GetDstRollbackMeta(Empty) returns (GetMetaResponse);
  rpc GetServices(Empty) returns (ServicesResponse);
  rpc GetChainID(Empty) returns (ChainIDResponse);
  rpc GetAppchainInfo(ChainInfoRequest) returns (ChainInfoResponse);
  rpc GetDirectTransactionMeta(DirectTransactionMetaRequest) returns (DirectTransactionMetaResponse);
  rpc Name(Empty) returns (NameResponse);
  rpc Type(Empty) returns (TypeResponse);
  rpc GetOffChainData(pb.GetDataRequest) returns (pb.GetDataResponse);
  rpc GetOffChainDataReq(Empty) returns (stream pb.GetDataRequest);
  rpc SubmitOffChainData(pb.GetDataResponse) returns (Empty);
}
