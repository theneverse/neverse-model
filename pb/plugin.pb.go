// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plugin.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type InitializeRequest struct {
	ConfigPath string `protobuf:"bytes,1,opt,name=config_path,json=configPath,proto3" json:"config_path,omitempty"`
	Extra      []byte `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
	Mode       string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *InitializeRequest) Reset()         { *m = InitializeRequest{} }
func (m *InitializeRequest) String() string { return proto.CompactTextString(m) }
func (*InitializeRequest) ProtoMessage()    {}
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{1}
}
func (m *InitializeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitializeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitializeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitializeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitializeRequest.Merge(m, src)
}
func (m *InitializeRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitializeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitializeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitializeRequest proto.InternalMessageInfo

func (m *InitializeRequest) GetConfigPath() string {
	if m != nil {
		return m.ConfigPath
	}
	return ""
}

func (m *InitializeRequest) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *InitializeRequest) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

type SubmitIBTPResponse struct {
	Status  bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result  *IBTP  `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SubmitIBTPResponse) Reset()         { *m = SubmitIBTPResponse{} }
func (m *SubmitIBTPResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitIBTPResponse) ProtoMessage()    {}
func (*SubmitIBTPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{2}
}
func (m *SubmitIBTPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitIBTPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitIBTPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitIBTPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitIBTPResponse.Merge(m, src)
}
func (m *SubmitIBTPResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitIBTPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitIBTPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitIBTPResponse proto.InternalMessageInfo

func (m *SubmitIBTPResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *SubmitIBTPResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SubmitIBTPResponse) GetResult() *IBTP {
	if m != nil {
		return m.Result
	}
	return nil
}

type SubmitIBTPRequest struct {
	From        string    `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Index       uint64    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ServiceId   string    `protobuf:"bytes,3,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	Type        IBTP_Type `protobuf:"varint,4,opt,name=type,proto3,enum=pb.IBTP_Type" json:"type,omitempty"`
	Content     *Content  `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	BxhProof    *BxhProof `protobuf:"bytes,6,opt,name=bxhProof,proto3" json:"bxhProof,omitempty"`
	IsEncrypted bool      `protobuf:"varint,7,opt,name=isEncrypted,proto3" json:"isEncrypted,omitempty"`
}

func (m *SubmitIBTPRequest) Reset()         { *m = SubmitIBTPRequest{} }
func (m *SubmitIBTPRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitIBTPRequest) ProtoMessage()    {}
func (*SubmitIBTPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{3}
}
func (m *SubmitIBTPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitIBTPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitIBTPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitIBTPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitIBTPRequest.Merge(m, src)
}
func (m *SubmitIBTPRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitIBTPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitIBTPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitIBTPRequest proto.InternalMessageInfo

func (m *SubmitIBTPRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *SubmitIBTPRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SubmitIBTPRequest) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *SubmitIBTPRequest) GetType() IBTP_Type {
	if m != nil {
		return m.Type
	}
	return IBTP_INTERCHAIN
}

func (m *SubmitIBTPRequest) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *SubmitIBTPRequest) GetBxhProof() *BxhProof {
	if m != nil {
		return m.BxhProof
	}
	return nil
}

func (m *SubmitIBTPRequest) GetIsEncrypted() bool {
	if m != nil {
		return m.IsEncrypted
	}
	return false
}

type SubmitIBTPRequestBatch struct {
	From        []string    `protobuf:"bytes,1,rep,name=from,proto3" json:"from,omitempty"`
	Index       []uint64    `protobuf:"varint,2,rep,packed,name=index,proto3" json:"index,omitempty"`
	ServiceId   []string    `protobuf:"bytes,3,rep,name=serviceId,proto3" json:"serviceId,omitempty"`
	Type        []IBTP_Type `protobuf:"varint,4,rep,packed,name=type,proto3,enum=pb.IBTP_Type" json:"type,omitempty"`
	Content     []*Content  `protobuf:"bytes,5,rep,name=content,proto3" json:"content,omitempty"`
	BxhProof    []*BxhProof `protobuf:"bytes,6,rep,name=bxhProof,proto3" json:"bxhProof,omitempty"`
	IsEncrypted []bool      `protobuf:"varint,7,rep,packed,name=isEncrypted,proto3" json:"isEncrypted,omitempty"`
}

func (m *SubmitIBTPRequestBatch) Reset()         { *m = SubmitIBTPRequestBatch{} }
func (m *SubmitIBTPRequestBatch) String() string { return proto.CompactTextString(m) }
func (*SubmitIBTPRequestBatch) ProtoMessage()    {}
func (*SubmitIBTPRequestBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{4}
}
func (m *SubmitIBTPRequestBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitIBTPRequestBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitIBTPRequestBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitIBTPRequestBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitIBTPRequestBatch.Merge(m, src)
}
func (m *SubmitIBTPRequestBatch) XXX_Size() int {
	return m.Size()
}
func (m *SubmitIBTPRequestBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitIBTPRequestBatch.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitIBTPRequestBatch proto.InternalMessageInfo

func (m *SubmitIBTPRequestBatch) GetFrom() []string {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SubmitIBTPRequestBatch) GetIndex() []uint64 {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *SubmitIBTPRequestBatch) GetServiceId() []string {
	if m != nil {
		return m.ServiceId
	}
	return nil
}

func (m *SubmitIBTPRequestBatch) GetType() []IBTP_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *SubmitIBTPRequestBatch) GetContent() []*Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *SubmitIBTPRequestBatch) GetBxhProof() []*BxhProof {
	if m != nil {
		return m.BxhProof
	}
	return nil
}

func (m *SubmitIBTPRequestBatch) GetIsEncrypted() []bool {
	if m != nil {
		return m.IsEncrypted
	}
	return nil
}

type SubmitReceiptRequest struct {
	To        string    `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Index     uint64    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ServiceId string    `protobuf:"bytes,3,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	Type      IBTP_Type `protobuf:"varint,4,opt,name=type,proto3,enum=pb.IBTP_Type" json:"type,omitempty"`
	Result    *Result   `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	BxhProof  *BxhProof `protobuf:"bytes,6,opt,name=bxhProof,proto3" json:"bxhProof,omitempty"`
}

func (m *SubmitReceiptRequest) Reset()         { *m = SubmitReceiptRequest{} }
func (m *SubmitReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitReceiptRequest) ProtoMessage()    {}
func (*SubmitReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{5}
}
func (m *SubmitReceiptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitReceiptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitReceiptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitReceiptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitReceiptRequest.Merge(m, src)
}
func (m *SubmitReceiptRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitReceiptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitReceiptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitReceiptRequest proto.InternalMessageInfo

func (m *SubmitReceiptRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SubmitReceiptRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SubmitReceiptRequest) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *SubmitReceiptRequest) GetType() IBTP_Type {
	if m != nil {
		return m.Type
	}
	return IBTP_INTERCHAIN
}

func (m *SubmitReceiptRequest) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SubmitReceiptRequest) GetBxhProof() *BxhProof {
	if m != nil {
		return m.BxhProof
	}
	return nil
}

type SubmitReceiptRequestBatch struct {
	To        []string    `protobuf:"bytes,1,rep,name=to,proto3" json:"to,omitempty"`
	Index     []uint64    `protobuf:"varint,2,rep,packed,name=index,proto3" json:"index,omitempty"`
	ServiceId []string    `protobuf:"bytes,3,rep,name=serviceId,proto3" json:"serviceId,omitempty"`
	Type      []IBTP_Type `protobuf:"varint,4,rep,packed,name=type,proto3,enum=pb.IBTP_Type" json:"type,omitempty"`
	Result    []*Result   `protobuf:"bytes,5,rep,name=result,proto3" json:"result,omitempty"`
	BxhProof  []*BxhProof `protobuf:"bytes,6,rep,name=bxhProof,proto3" json:"bxhProof,omitempty"`
}

func (m *SubmitReceiptRequestBatch) Reset()         { *m = SubmitReceiptRequestBatch{} }
func (m *SubmitReceiptRequestBatch) String() string { return proto.CompactTextString(m) }
func (*SubmitReceiptRequestBatch) ProtoMessage()    {}
func (*SubmitReceiptRequestBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{6}
}
func (m *SubmitReceiptRequestBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitReceiptRequestBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitReceiptRequestBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitReceiptRequestBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitReceiptRequestBatch.Merge(m, src)
}
func (m *SubmitReceiptRequestBatch) XXX_Size() int {
	return m.Size()
}
func (m *SubmitReceiptRequestBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitReceiptRequestBatch.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitReceiptRequestBatch proto.InternalMessageInfo

func (m *SubmitReceiptRequestBatch) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SubmitReceiptRequestBatch) GetIndex() []uint64 {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *SubmitReceiptRequestBatch) GetServiceId() []string {
	if m != nil {
		return m.ServiceId
	}
	return nil
}

func (m *SubmitReceiptRequestBatch) GetType() []IBTP_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *SubmitReceiptRequestBatch) GetResult() []*Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SubmitReceiptRequestBatch) GetBxhProof() []*BxhProof {
	if m != nil {
		return m.BxhProof
	}
	return nil
}

type QueryFilterLockStartRequest struct {
	AppchainIndex uint64 `protobuf:"varint,1,opt,name=appchainIndex,proto3" json:"appchainIndex,omitempty"`
}

func (m *QueryFilterLockStartRequest) Reset()         { *m = QueryFilterLockStartRequest{} }
func (m *QueryFilterLockStartRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFilterLockStartRequest) ProtoMessage()    {}
func (*QueryFilterLockStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{7}
}
func (m *QueryFilterLockStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFilterLockStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFilterLockStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFilterLockStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFilterLockStartRequest.Merge(m, src)
}
func (m *QueryFilterLockStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFilterLockStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFilterLockStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFilterLockStartRequest proto.InternalMessageInfo

func (m *QueryFilterLockStartRequest) GetAppchainIndex() uint64 {
	if m != nil {
		return m.AppchainIndex
	}
	return 0
}

type QueryFilterLockStartResponse struct {
	LockStart uint64 `protobuf:"varint,1,opt,name=lockStart,proto3" json:"lockStart,omitempty"`
}

func (m *QueryFilterLockStartResponse) Reset()         { *m = QueryFilterLockStartResponse{} }
func (m *QueryFilterLockStartResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFilterLockStartResponse) ProtoMessage()    {}
func (*QueryFilterLockStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{8}
}
func (m *QueryFilterLockStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFilterLockStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFilterLockStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFilterLockStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFilterLockStartResponse.Merge(m, src)
}
func (m *QueryFilterLockStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFilterLockStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFilterLockStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFilterLockStartResponse proto.InternalMessageInfo

func (m *QueryFilterLockStartResponse) GetLockStart() uint64 {
	if m != nil {
		return m.LockStart
	}
	return 0
}

type GetMessageRequest struct {
	ServicePair string `protobuf:"bytes,1,opt,name=servicePair,proto3" json:"servicePair,omitempty"`
	Idx         uint64 `protobuf:"varint,2,opt,name=idx,proto3" json:"idx,omitempty"`
}

func (m *GetMessageRequest) Reset()         { *m = GetMessageRequest{} }
func (m *GetMessageRequest) String() string { return proto.CompactTextString(m) }
func (*GetMessageRequest) ProtoMessage()    {}
func (*GetMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{9}
}
func (m *GetMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMessageRequest.Merge(m, src)
}
func (m *GetMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMessageRequest proto.InternalMessageInfo

func (m *GetMessageRequest) GetServicePair() string {
	if m != nil {
		return m.ServicePair
	}
	return ""
}

func (m *GetMessageRequest) GetIdx() uint64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

type GetMetaResponse struct {
	Meta map[string]uint64 `protobuf:"bytes,1,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GetMetaResponse) Reset()         { *m = GetMetaResponse{} }
func (m *GetMetaResponse) String() string { return proto.CompactTextString(m) }
func (*GetMetaResponse) ProtoMessage()    {}
func (*GetMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{10}
}
func (m *GetMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetaResponse.Merge(m, src)
}
func (m *GetMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetaResponse proto.InternalMessageInfo

func (m *GetMetaResponse) GetMeta() map[string]uint64 {
	if m != nil {
		return m.Meta
	}
	return nil
}

type ServicesResponse struct {
	Service []string `protobuf:"bytes,1,rep,name=service,proto3" json:"service,omitempty"`
}

func (m *ServicesResponse) Reset()         { *m = ServicesResponse{} }
func (m *ServicesResponse) String() string { return proto.CompactTextString(m) }
func (*ServicesResponse) ProtoMessage()    {}
func (*ServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{11}
}
func (m *ServicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesResponse.Merge(m, src)
}
func (m *ServicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesResponse proto.InternalMessageInfo

func (m *ServicesResponse) GetService() []string {
	if m != nil {
		return m.Service
	}
	return nil
}

type ChainIDResponse struct {
	BxhID      string `protobuf:"bytes,1,opt,name=bxhID,proto3" json:"bxhID,omitempty"`
	AppchainID string `protobuf:"bytes,2,opt,name=appchainID,proto3" json:"appchainID,omitempty"`
}

func (m *ChainIDResponse) Reset()         { *m = ChainIDResponse{} }
func (m *ChainIDResponse) String() string { return proto.CompactTextString(m) }
func (*ChainIDResponse) ProtoMessage()    {}
func (*ChainIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{12}
}
func (m *ChainIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainIDResponse.Merge(m, src)
}
func (m *ChainIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChainIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainIDResponse proto.InternalMessageInfo

func (m *ChainIDResponse) GetBxhID() string {
	if m != nil {
		return m.BxhID
	}
	return ""
}

func (m *ChainIDResponse) GetAppchainID() string {
	if m != nil {
		return m.AppchainID
	}
	return ""
}

type ChainInfoRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *ChainInfoRequest) Reset()         { *m = ChainInfoRequest{} }
func (m *ChainInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ChainInfoRequest) ProtoMessage()    {}
func (*ChainInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{13}
}
func (m *ChainInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainInfoRequest.Merge(m, src)
}
func (m *ChainInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChainInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainInfoRequest proto.InternalMessageInfo

func (m *ChainInfoRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type DirectTransactionMetaRequest struct {
	IBTPid string `protobuf:"bytes,1,opt,name=IBTPid,proto3" json:"IBTPid,omitempty"`
}

func (m *DirectTransactionMetaRequest) Reset()         { *m = DirectTransactionMetaRequest{} }
func (m *DirectTransactionMetaRequest) String() string { return proto.CompactTextString(m) }
func (*DirectTransactionMetaRequest) ProtoMessage()    {}
func (*DirectTransactionMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{14}
}
func (m *DirectTransactionMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectTransactionMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectTransactionMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectTransactionMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectTransactionMetaRequest.Merge(m, src)
}
func (m *DirectTransactionMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *DirectTransactionMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectTransactionMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DirectTransactionMetaRequest proto.InternalMessageInfo

func (m *DirectTransactionMetaRequest) GetIBTPid() string {
	if m != nil {
		return m.IBTPid
	}
	return ""
}

type ChainInfoResponse struct {
	Broker      string `protobuf:"bytes,1,opt,name=broker,proto3" json:"broker,omitempty"`
	TrustedRoot []byte `protobuf:"bytes,2,opt,name=trustedRoot,proto3" json:"trustedRoot,omitempty"`
	RuleAddr    string `protobuf:"bytes,3,opt,name=ruleAddr,proto3" json:"ruleAddr,omitempty"`
}

func (m *ChainInfoResponse) Reset()         { *m = ChainInfoResponse{} }
func (m *ChainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ChainInfoResponse) ProtoMessage()    {}
func (*ChainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{15}
}
func (m *ChainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainInfoResponse.Merge(m, src)
}
func (m *ChainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainInfoResponse proto.InternalMessageInfo

func (m *ChainInfoResponse) GetBroker() string {
	if m != nil {
		return m.Broker
	}
	return ""
}

func (m *ChainInfoResponse) GetTrustedRoot() []byte {
	if m != nil {
		return m.TrustedRoot
	}
	return nil
}

func (m *ChainInfoResponse) GetRuleAddr() string {
	if m != nil {
		return m.RuleAddr
	}
	return ""
}

// transaction meta in direct mode
type DirectTransactionMetaResponse struct {
	StartTimestamp    uint64 `protobuf:"varint,1,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	TimeoutPeriod     uint64 `protobuf:"varint,2,opt,name=timeoutPeriod,proto3" json:"timeoutPeriod,omitempty"`
	TransactionStatus uint64 `protobuf:"varint,3,opt,name=transactionStatus,proto3" json:"transactionStatus,omitempty"`
}

func (m *DirectTransactionMetaResponse) Reset()         { *m = DirectTransactionMetaResponse{} }
func (m *DirectTransactionMetaResponse) String() string { return proto.CompactTextString(m) }
func (*DirectTransactionMetaResponse) ProtoMessage()    {}
func (*DirectTransactionMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{16}
}
func (m *DirectTransactionMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectTransactionMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectTransactionMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectTransactionMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectTransactionMetaResponse.Merge(m, src)
}
func (m *DirectTransactionMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *DirectTransactionMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectTransactionMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DirectTransactionMetaResponse proto.InternalMessageInfo

func (m *DirectTransactionMetaResponse) GetStartTimestamp() uint64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *DirectTransactionMetaResponse) GetTimeoutPeriod() uint64 {
	if m != nil {
		return m.TimeoutPeriod
	}
	return 0
}

func (m *DirectTransactionMetaResponse) GetTransactionStatus() uint64 {
	if m != nil {
		return m.TransactionStatus
	}
	return 0
}

type NameResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *NameResponse) Reset()         { *m = NameResponse{} }
func (m *NameResponse) String() string { return proto.CompactTextString(m) }
func (*NameResponse) ProtoMessage()    {}
func (*NameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{17}
}
func (m *NameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameResponse.Merge(m, src)
}
func (m *NameResponse) XXX_Size() int {
	return m.Size()
}
func (m *NameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NameResponse proto.InternalMessageInfo

func (m *NameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TypeResponse struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *TypeResponse) Reset()         { *m = TypeResponse{} }
func (m *TypeResponse) String() string { return proto.CompactTextString(m) }
func (*TypeResponse) ProtoMessage()    {}
func (*TypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{18}
}
func (m *TypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeResponse.Merge(m, src)
}
func (m *TypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *TypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TypeResponse proto.InternalMessageInfo

func (m *TypeResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type LockEvent struct {
	Receipt       []byte `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Proof         []byte `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	AppchainIndex uint64 `protobuf:"varint,3,opt,name=appchainIndex,proto3" json:"appchainIndex,omitempty"`
	BlockNumber   uint64 `protobuf:"varint,4,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (m *LockEvent) Reset()         { *m = LockEvent{} }
func (m *LockEvent) String() string { return proto.CompactTextString(m) }
func (*LockEvent) ProtoMessage()    {}
func (*LockEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{19}
}
func (m *LockEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockEvent.Merge(m, src)
}
func (m *LockEvent) XXX_Size() int {
	return m.Size()
}
func (m *LockEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LockEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LockEvent proto.InternalMessageInfo

func (m *LockEvent) GetReceipt() []byte {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *LockEvent) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *LockEvent) GetAppchainIndex() uint64 {
	if m != nil {
		return m.AppchainIndex
	}
	return 0
}

func (m *LockEvent) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type UpdateMeta struct {
	Meta []byte `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *UpdateMeta) Reset()         { *m = UpdateMeta{} }
func (m *UpdateMeta) String() string { return proto.CompactTextString(m) }
func (*UpdateMeta) ProtoMessage()    {}
func (*UpdateMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{20}
}
func (m *UpdateMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMeta.Merge(m, src)
}
func (m *UpdateMeta) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMeta.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMeta proto.InternalMessageInfo

func (m *UpdateMeta) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type UnLock struct {
	Token      string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	From       string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Receipt    string   `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
	Amount     []byte   `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TxId       string   `protobuf:"bytes,5,opt,name=txId,proto3" json:"txId,omitempty"`
	RelayIndex uint64   `protobuf:"varint,6,opt,name=relayIndex,proto3" json:"relayIndex,omitempty"`
	MultiSigns [][]byte `protobuf:"bytes,7,rep,name=multiSigns,proto3" json:"multiSigns,omitempty"`
}

func (m *UnLock) Reset()         { *m = UnLock{} }
func (m *UnLock) String() string { return proto.CompactTextString(m) }
func (*UnLock) ProtoMessage()    {}
func (*UnLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{21}
}
func (m *UnLock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnLock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnLock.Merge(m, src)
}
func (m *UnLock) XXX_Size() int {
	return m.Size()
}
func (m *UnLock) XXX_DiscardUnknown() {
	xxx_messageInfo_UnLock.DiscardUnknown(m)
}

var xxx_messageInfo_UnLock proto.InternalMessageInfo

func (m *UnLock) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UnLock) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *UnLock) GetReceipt() string {
	if m != nil {
		return m.Receipt
	}
	return ""
}

func (m *UnLock) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *UnLock) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *UnLock) GetRelayIndex() uint64 {
	if m != nil {
		return m.RelayIndex
	}
	return 0
}

func (m *UnLock) GetMultiSigns() [][]byte {
	if m != nil {
		return m.MultiSigns
	}
	return nil
}

type QueryRelayIndexResponse struct {
	RelayIndex uint64 `protobuf:"varint,1,opt,name=relayIndex,proto3" json:"relayIndex,omitempty"`
}

func (m *QueryRelayIndexResponse) Reset()         { *m = QueryRelayIndexResponse{} }
func (m *QueryRelayIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRelayIndexResponse) ProtoMessage()    {}
func (*QueryRelayIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{22}
}
func (m *QueryRelayIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRelayIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRelayIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRelayIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRelayIndexResponse.Merge(m, src)
}
func (m *QueryRelayIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRelayIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRelayIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRelayIndexResponse proto.InternalMessageInfo

func (m *QueryRelayIndexResponse) GetRelayIndex() uint64 {
	if m != nil {
		return m.RelayIndex
	}
	return 0
}

type QueryAppchainIndexResponse struct {
	AppchainIndex uint64 `protobuf:"varint,1,opt,name=appchainIndex,proto3" json:"appchainIndex,omitempty"`
}

func (m *QueryAppchainIndexResponse) Reset()         { *m = QueryAppchainIndexResponse{} }
func (m *QueryAppchainIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAppchainIndexResponse) ProtoMessage()    {}
func (*QueryAppchainIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{23}
}
func (m *QueryAppchainIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAppchainIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAppchainIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAppchainIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAppchainIndexResponse.Merge(m, src)
}
func (m *QueryAppchainIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAppchainIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAppchainIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAppchainIndexResponse proto.InternalMessageInfo

func (m *QueryAppchainIndexResponse) GetAppchainIndex() uint64 {
	if m != nil {
		return m.AppchainIndex
	}
	return 0
}

type QueryLockEventByIndexRequest struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryLockEventByIndexRequest) Reset()         { *m = QueryLockEventByIndexRequest{} }
func (m *QueryLockEventByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockEventByIndexRequest) ProtoMessage()    {}
func (*QueryLockEventByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{24}
}
func (m *QueryLockEventByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockEventByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockEventByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockEventByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockEventByIndexRequest.Merge(m, src)
}
func (m *QueryLockEventByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockEventByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockEventByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockEventByIndexRequest proto.InternalMessageInfo

func (m *QueryLockEventByIndexRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*InitializeRequest)(nil), "pb.InitializeRequest")
	proto.RegisterType((*SubmitIBTPResponse)(nil), "pb.SubmitIBTPResponse")
	proto.RegisterType((*SubmitIBTPRequest)(nil), "pb.SubmitIBTPRequest")
	proto.RegisterType((*SubmitIBTPRequestBatch)(nil), "pb.SubmitIBTPRequestBatch")
	proto.RegisterType((*SubmitReceiptRequest)(nil), "pb.SubmitReceiptRequest")
	proto.RegisterType((*SubmitReceiptRequestBatch)(nil), "pb.SubmitReceiptRequestBatch")
	proto.RegisterType((*QueryFilterLockStartRequest)(nil), "pb.QueryFilterLockStartRequest")
	proto.RegisterType((*QueryFilterLockStartResponse)(nil), "pb.QueryFilterLockStartResponse")
	proto.RegisterType((*GetMessageRequest)(nil), "pb.GetMessageRequest")
	proto.RegisterType((*GetMetaResponse)(nil), "pb.GetMetaResponse")
	proto.RegisterMapType((map[string]uint64)(nil), "pb.GetMetaResponse.MetaEntry")
	proto.RegisterType((*ServicesResponse)(nil), "pb.ServicesResponse")
	proto.RegisterType((*ChainIDResponse)(nil), "pb.ChainIDResponse")
	proto.RegisterType((*ChainInfoRequest)(nil), "pb.ChainInfoRequest")
	proto.RegisterType((*DirectTransactionMetaRequest)(nil), "pb.DirectTransactionMetaRequest")
	proto.RegisterType((*ChainInfoResponse)(nil), "pb.ChainInfoResponse")
	proto.RegisterType((*DirectTransactionMetaResponse)(nil), "pb.DirectTransactionMetaResponse")
	proto.RegisterType((*NameResponse)(nil), "pb.NameResponse")
	proto.RegisterType((*TypeResponse)(nil), "pb.TypeResponse")
	proto.RegisterType((*LockEvent)(nil), "pb.LockEvent")
	proto.RegisterType((*UpdateMeta)(nil), "pb.UpdateMeta")
	proto.RegisterType((*UnLock)(nil), "pb.UnLock")
	proto.RegisterType((*QueryRelayIndexResponse)(nil), "pb.QueryRelayIndexResponse")
	proto.RegisterType((*QueryAppchainIndexResponse)(nil), "pb.QueryAppchainIndexResponse")
	proto.RegisterType((*QueryLockEventByIndexRequest)(nil), "pb.QueryLockEventByIndexRequest")
}

func init() { proto.RegisterFile("plugin.proto", fileDescriptor_22a625af4bc1cc87) }

var fileDescriptor_22a625af4bc1cc87 = []byte{
	// 1393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x0e, 0x2d, 0x59, 0xb2, 0x46, 0xb2, 0x13, 0x6f, 0x1c, 0xbf, 0x7c, 0x15, 0x5b, 0xaf, 0xc2,
	0xbc, 0x2d, 0x0c, 0xd4, 0x10, 0x1c, 0x37, 0xfd, 0x4a, 0x8b, 0x02, 0xf1, 0x47, 0x05, 0xa1, 0x6d,
	0xe2, 0xd2, 0xce, 0xb5, 0x01, 0x25, 0xae, 0x2c, 0xc2, 0xe2, 0x47, 0xc8, 0x65, 0x20, 0x15, 0xe8,
	0xa1, 0xe8, 0x1f, 0xe8, 0xbd, 0x7f, 0xa4, 0x3f, 0xa1, 0x40, 0x2f, 0x39, 0xf6, 0x58, 0x24, 0xbf,
	0xa0, 0x97, 0x9e, 0x8b, 0x9d, 0xdd, 0x25, 0x57, 0x5f, 0x86, 0x02, 0xb4, 0x37, 0xce, 0xec, 0xec,
	0xcc, 0x3c, 0x33, 0xb3, 0xfb, 0x2c, 0xa1, 0x16, 0x0d, 0xd3, 0x4b, 0x2f, 0x68, 0x45, 0x71, 0xc8,
	0x42, 0xb2, 0x12, 0x75, 0xeb, 0xe0, 0x75, 0x59, 0x24, 0xe4, 0xfa, 0x9d, 0xee, 0x68, 0xf0, 0x9c,
	0xc5, 0x4e, 0x90, 0x38, 0x3d, 0xe6, 0x85, 0xd2, 0xac, 0x7e, 0x37, 0xec, 0xf7, 0x7b, 0x03, 0xc7,
	0x0b, 0xc4, 0x9a, 0xef, 0x25, 0x49, 0xb6, 0x68, 0x95, 0x61, 0xf5, 0xd4, 0x8f, 0xd8, 0xd8, 0xfa,
	0x16, 0x36, 0x3b, 0x81, 0xc7, 0x3c, 0x67, 0xe8, 0x7d, 0x47, 0x6d, 0xfa, 0x22, 0xa5, 0x09, 0x23,
	0xff, 0x83, 0x6a, 0x2f, 0x0c, 0xfa, 0xde, 0xe5, 0xf3, 0xc8, 0x61, 0x03, 0xd3, 0x68, 0x1a, 0x7b,
	0x15, 0x1b, 0x84, 0xea, 0xcc, 0x61, 0x03, 0xb2, 0x05, 0xab, 0x74, 0xc4, 0x62, 0xc7, 0x5c, 0x69,
	0x1a, 0x7b, 0x35, 0x5b, 0x08, 0x84, 0x40, 0xd1, 0x0f, 0x5d, 0x6a, 0x16, 0xd0, 0x1e, 0xbf, 0xad,
	0x01, 0x90, 0xf3, 0xb4, 0xeb, 0x7b, 0xac, 0x73, 0x74, 0x71, 0x66, 0xd3, 0x24, 0x0a, 0x83, 0x84,
	0x92, 0x6d, 0x28, 0x25, 0xcc, 0x61, 0x69, 0x82, 0xbe, 0xd7, 0x6c, 0x29, 0x11, 0x13, 0xca, 0x3e,
	0x4d, 0x12, 0xe7, 0x92, 0xa2, 0xe7, 0x8a, 0xad, 0x44, 0xd2, 0x84, 0x52, 0x4c, 0x93, 0x74, 0xc8,
	0xd0, 0x7b, 0xf5, 0x70, 0xad, 0x15, 0x75, 0x5b, 0xe8, 0x53, 0xea, 0xad, 0x3f, 0x0d, 0xd8, 0xd4,
	0x43, 0x09, 0x28, 0x04, 0x8a, 0xfd, 0x38, 0xf4, 0x25, 0x06, 0xfc, 0xe6, 0xd9, 0x7b, 0x81, 0x4b,
	0x47, 0x18, 0xa3, 0x68, 0x0b, 0x81, 0xec, 0x40, 0x25, 0xa1, 0xf1, 0x4b, 0xaf, 0x47, 0x3b, 0xae,
	0x84, 0x90, 0x2b, 0xc8, 0x3d, 0x28, 0xb2, 0x71, 0x44, 0xcd, 0x62, 0xd3, 0xd8, 0xdb, 0x38, 0x5c,
	0x57, 0xd1, 0x5b, 0x17, 0xe3, 0x88, 0xda, 0xb8, 0x44, 0xde, 0x81, 0x72, 0x2f, 0x0c, 0x18, 0x0d,
	0x98, 0xb9, 0x8a, 0x39, 0x56, 0xb9, 0x95, 0x54, 0xd9, 0x6a, 0x8d, 0xec, 0xc1, 0x5a, 0x77, 0x34,
	0x38, 0x8b, 0xc3, 0xb0, 0x6f, 0x96, 0xd0, 0xae, 0xc6, 0xed, 0x94, 0xce, 0xce, 0x56, 0x49, 0x13,
	0xaa, 0x5e, 0x72, 0x1a, 0xf4, 0xe2, 0x71, 0xc4, 0xa8, 0x6b, 0x96, 0xb1, 0x54, 0xba, 0xca, 0xfa,
	0xcb, 0x80, 0xed, 0x19, 0xcc, 0x47, 0x0e, 0xeb, 0x0d, 0x34, 0xe0, 0x85, 0x79, 0xc0, 0x0b, 0x0b,
	0x81, 0x17, 0x16, 0x01, 0x2f, 0x2c, 0x05, 0xbc, 0xb0, 0x24, 0xf0, 0xc2, 0xdb, 0x00, 0x2f, 0x4c,
	0x03, 0xff, 0xcd, 0x80, 0x2d, 0x01, 0xdc, 0xa6, 0x3d, 0xea, 0x45, 0x4c, 0xf5, 0x7b, 0x03, 0x56,
	0x58, 0x28, 0xbb, 0xbd, 0xc2, 0xc2, 0x7f, 0xab, 0xd7, 0x56, 0x36, 0x8e, 0xa2, 0xd5, 0xc0, 0x8d,
	0x84, 0x46, 0x0d, 0xe4, 0xf2, 0x8d, 0xb6, 0x5e, 0x19, 0xf0, 0xdf, 0x79, 0x68, 0x44, 0x27, 0x15,
	0xa4, 0xc2, 0x2c, 0xa4, 0x7f, 0xb2, 0x8b, 0x3a, 0xa4, 0xc2, 0x52, 0x90, 0xae, 0x69, 0xa1, 0x75,
	0x0c, 0x77, 0xbf, 0x49, 0x69, 0x3c, 0xfe, 0xc2, 0x1b, 0x32, 0x1a, 0x7f, 0x15, 0xf6, 0xae, 0xce,
	0x99, 0x13, 0x67, 0x6d, 0xfa, 0x3f, 0xac, 0x3b, 0x51, 0x84, 0xd7, 0x53, 0x07, 0xb1, 0x18, 0xd8,
	0x9e, 0x49, 0xa5, 0xf5, 0x19, 0xec, 0xcc, 0x77, 0x22, 0xaf, 0x91, 0x1d, 0xa8, 0x0c, 0x95, 0x52,
	0x7a, 0xc8, 0x15, 0x56, 0x1b, 0x36, 0xdb, 0x94, 0x7d, 0x2d, 0x2e, 0x10, 0x15, 0xb8, 0x09, 0x55,
	0x59, 0x95, 0x33, 0xc7, 0x8b, 0xe5, 0xa0, 0xe8, 0x2a, 0x72, 0x0b, 0x0a, 0x9e, 0xab, 0xe6, 0x85,
	0x7f, 0x5a, 0xdf, 0xc3, 0x4d, 0x74, 0xc4, 0x9c, 0x2c, 0xf2, 0x03, 0x28, 0xfa, 0x94, 0x39, 0xd8,
	0x95, 0xea, 0xe1, 0x2e, 0x2f, 0xc2, 0x94, 0x49, 0x8b, 0x0b, 0xa7, 0x01, 0x8b, 0xc7, 0x36, 0x9a,
	0xd6, 0x3f, 0x82, 0x4a, 0xa6, 0xe2, 0x41, 0xae, 0xe8, 0x58, 0x86, 0xe7, 0x9f, 0xbc, 0xab, 0x2f,
	0x9d, 0x61, 0x4a, 0xd5, 0xa0, 0xa2, 0xf0, 0x68, 0xe5, 0x63, 0xc3, 0xda, 0x87, 0x5b, 0xe7, 0x22,
	0xbf, 0x24, 0x8b, 0x6f, 0x42, 0x59, 0xe6, 0x2c, 0x07, 0x43, 0x89, 0x56, 0x1b, 0x6e, 0x1e, 0x63,
	0x05, 0x4f, 0x32, 0xe3, 0x2d, 0x58, 0xed, 0x8e, 0x06, 0x9d, 0x13, 0x19, 0x4e, 0x08, 0xa4, 0x01,
	0x90, 0x55, 0xfb, 0x44, 0x5e, 0xb7, 0x9a, 0x86, 0x87, 0x15, 0x8e, 0x82, 0x7e, 0xa8, 0xaa, 0x67,
	0x42, 0x59, 0x6d, 0x10, 0xbe, 0x94, 0x68, 0x7d, 0x08, 0x3b, 0x27, 0x5e, 0x4c, 0x7b, 0xec, 0x22,
	0x27, 0x22, 0x51, 0x0e, 0xb1, 0x73, 0x1b, 0x4a, 0x7c, 0xe0, 0x3c, 0x57, 0x6e, 0x94, 0x92, 0xe5,
	0xc1, 0xa6, 0x16, 0x25, 0xa7, 0x87, 0x6e, 0x1c, 0x5e, 0x51, 0xd5, 0x1f, 0x29, 0xf1, 0xe6, 0xb1,
	0x38, 0x4d, 0x18, 0x75, 0xed, 0x30, 0x64, 0x92, 0x7c, 0x74, 0x15, 0xa9, 0xc3, 0x5a, 0x9c, 0x0e,
	0xe9, 0x63, 0xd7, 0x8d, 0xe5, 0xb9, 0xce, 0x64, 0xeb, 0x67, 0x03, 0x76, 0x17, 0xe4, 0x28, 0xe3,
	0xbe, 0x0b, 0x1b, 0x09, 0x1f, 0x9d, 0x0b, 0xcf, 0xa7, 0x09, 0x73, 0xfc, 0x48, 0x0e, 0xd5, 0x94,
	0x96, 0x4f, 0x2f, 0xf3, 0x7c, 0x1a, 0xa6, 0xec, 0x8c, 0xc6, 0x5e, 0xe8, 0xca, 0x9e, 0x4d, 0x2a,
	0xc9, 0x3e, 0x6c, 0x6a, 0xac, 0x7c, 0x2e, 0xf8, 0xae, 0x80, 0x96, 0xb3, 0x0b, 0x96, 0x05, 0xb5,
	0x27, 0x8e, 0x4f, 0xb3, 0x5c, 0x08, 0x14, 0x03, 0xc7, 0xa7, 0x8a, 0xb8, 0xf8, 0x37, 0xb7, 0xc1,
	0x03, 0xab, 0xd9, 0xe0, 0xa9, 0x96, 0x36, 0xfc, 0xdb, 0xfa, 0xd1, 0x80, 0x0a, 0x3f, 0x29, 0xa7,
	0x2f, 0xf9, 0x9d, 0x6b, 0x42, 0x39, 0x16, 0x57, 0x0a, 0x1a, 0xd5, 0x6c, 0x25, 0xf2, 0xa1, 0x88,
	0xf0, 0x1c, 0x4b, 0x0a, 0x47, 0x61, 0xf6, 0x5c, 0x16, 0xe6, 0x9c, 0x4b, 0xde, 0x87, 0x2e, 0x3f,
	0x67, 0x4f, 0x52, 0xbf, 0x4b, 0x63, 0xbc, 0x27, 0x8b, 0xb6, 0xae, 0xb2, 0x9a, 0x00, 0xcf, 0x22,
	0xd7, 0x61, 0x94, 0xd7, 0x17, 0x1f, 0x06, 0xe2, 0xb4, 0xf0, 0x50, 0xf8, 0x6d, 0xfd, 0x62, 0x40,
	0xe9, 0x59, 0xc0, 0x33, 0xe5, 0xa9, 0xb0, 0xf0, 0x8a, 0x06, 0x6a, 0x3e, 0x51, 0xc8, 0x08, 0x6c,
	0x45, 0x63, 0x6e, 0x0d, 0x8e, 0xe8, 0x6e, 0x06, 0x67, 0x1b, 0x4a, 0x8e, 0x1f, 0xa6, 0x01, 0xc3,
	0x6c, 0x6a, 0xb6, 0x94, 0xb0, 0x44, 0xa3, 0x8e, 0x8b, 0xd7, 0x34, 0x2f, 0xd1, 0xa8, 0xe3, 0xf2,
	0xc9, 0x8f, 0xe9, 0xd0, 0x19, 0x0b, 0x84, 0x25, 0xcc, 0x5e, 0xd3, 0xf0, 0x75, 0x3f, 0x1d, 0x32,
	0xef, 0xdc, 0xbb, 0x0c, 0x12, 0x64, 0x9f, 0x9a, 0xad, 0x69, 0xac, 0x4f, 0xe0, 0x3f, 0x78, 0x2d,
	0xd9, 0xd9, 0x96, 0xac, 0x23, 0x93, 0xae, 0x8d, 0x69, 0xd7, 0xd6, 0x11, 0xd4, 0x71, 0xeb, 0x63,
	0xbd, 0x9e, 0xd9, 0xee, 0xe5, 0x6e, 0xc5, 0x87, 0xf2, 0x56, 0xcc, 0xba, 0x7c, 0xa4, 0x92, 0x10,
	0x47, 0x2d, 0xe3, 0x07, 0x43, 0xa3, 0xbc, 0xc3, 0x1f, 0x00, 0x36, 0x54, 0xd4, 0x33, 0x7c, 0x4e,
	0x92, 0x16, 0x40, 0xfe, 0xf6, 0x23, 0x77, 0x90, 0x14, 0xa6, 0xdf, 0x82, 0xf5, 0x0a, 0x57, 0xe3,
	0x5b, 0x91, 0xec, 0xc2, 0x2a, 0xde, 0xac, 0x24, 0xd7, 0xe9, 0xcb, 0x3b, 0x50, 0x3c, 0x67, 0x61,
	0xb4, 0x60, 0xd5, 0x82, 0x4a, 0x9b, 0xe2, 0x33, 0xe5, 0x78, 0xa0, 0x9b, 0x64, 0x0f, 0xb9, 0x03,
	0x83, 0xec, 0xc3, 0x7a, 0x9b, 0x32, 0x6d, 0x70, 0x34, 0xbb, 0x0d, 0xfe, 0x99, 0x2f, 0x1d, 0x18,
	0xe4, 0x53, 0x80, 0xfc, 0xed, 0x23, 0xd2, 0x9f, 0x79, 0x0b, 0xd5, 0xb7, 0xa7, 0xd5, 0xb2, 0xd4,
	0xa7, 0x70, 0x33, 0xd7, 0x0a, 0x9e, 0xad, 0xcf, 0xf5, 0x80, 0x6b, 0x0b, 0xdd, 0x3c, 0x86, 0xf5,
	0x09, 0xe2, 0x26, 0x66, 0x6e, 0x38, 0xc9, 0xe5, 0x0b, 0x5d, 0x7c, 0xa9, 0x5e, 0xc8, 0xd2, 0x5e,
	0x24, 0xb3, 0xbb, 0xc8, 0xcf, 0xf5, 0xf9, 0x1c, 0x60, 0x05, 0x9f, 0xa6, 0x8a, 0xf6, 0x44, 0x59,
	0x66, 0x68, 0x30, 0xaf, 0x3a, 0x79, 0x88, 0x2c, 0x29, 0x63, 0x2c, 0xbd, 0xeb, 0x3d, 0xd1, 0xcd,
	0x60, 0xba, 0x4b, 0xb7, 0xe7, 0x30, 0x21, 0xd9, 0x07, 0x50, 0x49, 0x2d, 0x61, 0xfd, 0x00, 0xd9,
	0xf6, 0xd8, 0x19, 0x0e, 0xbb, 0x4e, 0xef, 0x6a, 0xa9, 0x2d, 0x0f, 0x81, 0xb4, 0x29, 0x3b, 0x49,
	0x98, 0x1d, 0xbe, 0xc5, 0xae, 0x16, 0x54, 0xdb, 0x94, 0x29, 0x6a, 0xd5, 0xcd, 0xb7, 0xb0, 0xba,
	0xd3, 0x9c, 0x2b, 0x60, 0x48, 0x72, 0x9d, 0xf1, 0x3e, 0x4d, 0xba, 0x9f, 0x23, 0x8c, 0xfc, 0x9c,
	0xf7, 0x43, 0xb2, 0x95, 0xdb, 0xe5, 0x9c, 0x5a, 0xbf, 0x33, 0xa5, 0x95, 0xfb, 0x9f, 0x83, 0xc9,
	0x31, 0xcd, 0xe3, 0x2b, 0xd2, 0xe4, 0x5b, 0xae, 0xa3, 0xdb, 0xfa, 0xbd, 0x6b, 0x2c, 0x64, 0x80,
	0xfb, 0x50, 0xe4, 0x84, 0xa3, 0x03, 0xb9, 0xc5, 0x3f, 0x27, 0x58, 0xe8, 0x3e, 0x14, 0x39, 0xe3,
	0xcc, 0x18, 0x4d, 0xd0, 0xd0, 0x23, 0x84, 0xfa, 0xb4, 0xdf, 0x47, 0x14, 0x27, 0x0e, 0xbf, 0xf1,
	0x65, 0xc1, 0xb9, 0xa0, 0x72, 0xba, 0x3d, 0xa1, 0x93, 0x7b, 0x3f, 0xc0, 0xd6, 0xe9, 0x7b, 0x6d,
	0xfa, 0x42, 0x0f, 0x37, 0xc7, 0xd3, 0x81, 0xc1, 0x3b, 0x2e, 0xa6, 0x7f, 0x22, 0xea, 0xbc, 0x08,
	0xda, 0x1d, 0x74, 0x64, 0xfe, 0xfa, 0xba, 0x61, 0xbc, 0x7a, 0xdd, 0x30, 0xfe, 0x78, 0xdd, 0x30,
	0x7e, 0x7a, 0xd3, 0xb8, 0xf1, 0xea, 0x4d, 0xe3, 0xc6, 0xef, 0x6f, 0x1a, 0x37, 0xba, 0x25, 0xfc,
	0x2d, 0x7e, 0xff, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x7d, 0x98, 0x7c, 0x6a, 0x0f, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppchainPluginClient is the client API for AppchainPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppchainPluginClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*Empty, error)
	Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetIBTPCh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AppchainPlugin_GetIBTPChClient, error)
	GetUpdateMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AppchainPlugin_GetUpdateMetaClient, error)
	SubmitIBTP(ctx context.Context, in *SubmitIBTPRequest, opts ...grpc.CallOption) (*SubmitIBTPResponse, error)
	SubmitIBTPBatch(ctx context.Context, in *SubmitIBTPRequestBatch, opts ...grpc.CallOption) (*SubmitIBTPResponse, error)
	SubmitReceipt(ctx context.Context, in *SubmitReceiptRequest, opts ...grpc.CallOption) (*SubmitIBTPResponse, error)
	SubmitReceiptBatch(ctx context.Context, in *SubmitReceiptRequestBatch, opts ...grpc.CallOption) (*SubmitIBTPResponse, error)
	GetOutMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*IBTP, error)
	GetReceiptMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*IBTP, error)
	GetInMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetaResponse, error)
	GetOutMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetaResponse, error)
	GetCallbackMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetaResponse, error)
	GetDstRollbackMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetaResponse, error)
	GetServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServicesResponse, error)
	GetChainID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainIDResponse, error)
	GetAppchainInfo(ctx context.Context, in *ChainInfoRequest, opts ...grpc.CallOption) (*ChainInfoResponse, error)
	GetDirectTransactionMeta(ctx context.Context, in *DirectTransactionMetaRequest, opts ...grpc.CallOption) (*DirectTransactionMetaResponse, error)
	Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NameResponse, error)
	Type(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TypeResponse, error)
	GetOffChainData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	GetOffChainDataReq(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AppchainPlugin_GetOffChainDataReqClient, error)
	SubmitOffChainData(ctx context.Context, in *GetDataResponse, opts ...grpc.CallOption) (*Empty, error)
}

type appchainPluginClient struct {
	cc *grpc.ClientConn
}

func NewAppchainPluginClient(cc *grpc.ClientConn) AppchainPluginClient {
	return &appchainPluginClient{cc}
}

func (c *appchainPluginClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetIBTPCh(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AppchainPlugin_GetIBTPChClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AppchainPlugin_serviceDesc.Streams[0], "/pb.AppchainPlugin/GetIBTPCh", opts...)
	if err != nil {
		return nil, err
	}
	x := &appchainPluginGetIBTPChClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppchainPlugin_GetIBTPChClient interface {
	Recv() (*IBTP, error)
	grpc.ClientStream
}

type appchainPluginGetIBTPChClient struct {
	grpc.ClientStream
}

func (x *appchainPluginGetIBTPChClient) Recv() (*IBTP, error) {
	m := new(IBTP)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appchainPluginClient) GetUpdateMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AppchainPlugin_GetUpdateMetaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AppchainPlugin_serviceDesc.Streams[1], "/pb.AppchainPlugin/GetUpdateMeta", opts...)
	if err != nil {
		return nil, err
	}
	x := &appchainPluginGetUpdateMetaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppchainPlugin_GetUpdateMetaClient interface {
	Recv() (*UpdateMeta, error)
	grpc.ClientStream
}

type appchainPluginGetUpdateMetaClient struct {
	grpc.ClientStream
}

func (x *appchainPluginGetUpdateMetaClient) Recv() (*UpdateMeta, error) {
	m := new(UpdateMeta)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appchainPluginClient) SubmitIBTP(ctx context.Context, in *SubmitIBTPRequest, opts ...grpc.CallOption) (*SubmitIBTPResponse, error) {
	out := new(SubmitIBTPResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/SubmitIBTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) SubmitIBTPBatch(ctx context.Context, in *SubmitIBTPRequestBatch, opts ...grpc.CallOption) (*SubmitIBTPResponse, error) {
	out := new(SubmitIBTPResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/SubmitIBTPBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) SubmitReceipt(ctx context.Context, in *SubmitReceiptRequest, opts ...grpc.CallOption) (*SubmitIBTPResponse, error) {
	out := new(SubmitIBTPResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/SubmitReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) SubmitReceiptBatch(ctx context.Context, in *SubmitReceiptRequestBatch, opts ...grpc.CallOption) (*SubmitIBTPResponse, error) {
	out := new(SubmitIBTPResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/SubmitReceiptBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetOutMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*IBTP, error) {
	out := new(IBTP)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetOutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetReceiptMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*IBTP, error) {
	out := new(IBTP)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetReceiptMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetInMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetInMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetOutMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetOutMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetCallbackMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetCallbackMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetDstRollbackMeta(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetDstRollbackMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServicesResponse, error) {
	out := new(ServicesResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetChainID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainIDResponse, error) {
	out := new(ChainIDResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetAppchainInfo(ctx context.Context, in *ChainInfoRequest, opts ...grpc.CallOption) (*ChainInfoResponse, error) {
	out := new(ChainInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetAppchainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetDirectTransactionMeta(ctx context.Context, in *DirectTransactionMetaRequest, opts ...grpc.CallOption) (*DirectTransactionMetaResponse, error) {
	out := new(DirectTransactionMetaResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetDirectTransactionMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) Type(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TypeResponse, error) {
	out := new(TypeResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/Type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetOffChainData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/GetOffChainData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appchainPluginClient) GetOffChainDataReq(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AppchainPlugin_GetOffChainDataReqClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AppchainPlugin_serviceDesc.Streams[2], "/pb.AppchainPlugin/GetOffChainDataReq", opts...)
	if err != nil {
		return nil, err
	}
	x := &appchainPluginGetOffChainDataReqClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppchainPlugin_GetOffChainDataReqClient interface {
	Recv() (*GetDataRequest, error)
	grpc.ClientStream
}

type appchainPluginGetOffChainDataReqClient struct {
	grpc.ClientStream
}

func (x *appchainPluginGetOffChainDataReqClient) Recv() (*GetDataRequest, error) {
	m := new(GetDataRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appchainPluginClient) SubmitOffChainData(ctx context.Context, in *GetDataResponse, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.AppchainPlugin/SubmitOffChainData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppchainPluginServer is the server API for AppchainPlugin service.
type AppchainPluginServer interface {
	Initialize(context.Context, *InitializeRequest) (*Empty, error)
	Start(context.Context, *Empty) (*Empty, error)
	Stop(context.Context, *Empty) (*Empty, error)
	GetIBTPCh(*Empty, AppchainPlugin_GetIBTPChServer) error
	GetUpdateMeta(*Empty, AppchainPlugin_GetUpdateMetaServer) error
	SubmitIBTP(context.Context, *SubmitIBTPRequest) (*SubmitIBTPResponse, error)
	SubmitIBTPBatch(context.Context, *SubmitIBTPRequestBatch) (*SubmitIBTPResponse, error)
	SubmitReceipt(context.Context, *SubmitReceiptRequest) (*SubmitIBTPResponse, error)
	SubmitReceiptBatch(context.Context, *SubmitReceiptRequestBatch) (*SubmitIBTPResponse, error)
	GetOutMessage(context.Context, *GetMessageRequest) (*IBTP, error)
	GetReceiptMessage(context.Context, *GetMessageRequest) (*IBTP, error)
	GetInMeta(context.Context, *Empty) (*GetMetaResponse, error)
	GetOutMeta(context.Context, *Empty) (*GetMetaResponse, error)
	GetCallbackMeta(context.Context, *Empty) (*GetMetaResponse, error)
	GetDstRollbackMeta(context.Context, *Empty) (*GetMetaResponse, error)
	GetServices(context.Context, *Empty) (*ServicesResponse, error)
	GetChainID(context.Context, *Empty) (*ChainIDResponse, error)
	GetAppchainInfo(context.Context, *ChainInfoRequest) (*ChainInfoResponse, error)
	GetDirectTransactionMeta(context.Context, *DirectTransactionMetaRequest) (*DirectTransactionMetaResponse, error)
	Name(context.Context, *Empty) (*NameResponse, error)
	Type(context.Context, *Empty) (*TypeResponse, error)
	GetOffChainData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	GetOffChainDataReq(*Empty, AppchainPlugin_GetOffChainDataReqServer) error
	SubmitOffChainData(context.Context, *GetDataResponse) (*Empty, error)
}

// UnimplementedAppchainPluginServer can be embedded to have forward compatible implementations.
type UnimplementedAppchainPluginServer struct {
}

func (*UnimplementedAppchainPluginServer) Initialize(ctx context.Context, req *InitializeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (*UnimplementedAppchainPluginServer) Start(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedAppchainPluginServer) Stop(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedAppchainPluginServer) GetIBTPCh(req *Empty, srv AppchainPlugin_GetIBTPChServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIBTPCh not implemented")
}
func (*UnimplementedAppchainPluginServer) GetUpdateMeta(req *Empty, srv AppchainPlugin_GetUpdateMetaServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdateMeta not implemented")
}
func (*UnimplementedAppchainPluginServer) SubmitIBTP(ctx context.Context, req *SubmitIBTPRequest) (*SubmitIBTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitIBTP not implemented")
}
func (*UnimplementedAppchainPluginServer) SubmitIBTPBatch(ctx context.Context, req *SubmitIBTPRequestBatch) (*SubmitIBTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitIBTPBatch not implemented")
}
func (*UnimplementedAppchainPluginServer) SubmitReceipt(ctx context.Context, req *SubmitReceiptRequest) (*SubmitIBTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReceipt not implemented")
}
func (*UnimplementedAppchainPluginServer) SubmitReceiptBatch(ctx context.Context, req *SubmitReceiptRequestBatch) (*SubmitIBTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReceiptBatch not implemented")
}
func (*UnimplementedAppchainPluginServer) GetOutMessage(ctx context.Context, req *GetMessageRequest) (*IBTP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutMessage not implemented")
}
func (*UnimplementedAppchainPluginServer) GetReceiptMessage(ctx context.Context, req *GetMessageRequest) (*IBTP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptMessage not implemented")
}
func (*UnimplementedAppchainPluginServer) GetInMeta(ctx context.Context, req *Empty) (*GetMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInMeta not implemented")
}
func (*UnimplementedAppchainPluginServer) GetOutMeta(ctx context.Context, req *Empty) (*GetMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutMeta not implemented")
}
func (*UnimplementedAppchainPluginServer) GetCallbackMeta(ctx context.Context, req *Empty) (*GetMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallbackMeta not implemented")
}
func (*UnimplementedAppchainPluginServer) GetDstRollbackMeta(ctx context.Context, req *Empty) (*GetMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDstRollbackMeta not implemented")
}
func (*UnimplementedAppchainPluginServer) GetServices(ctx context.Context, req *Empty) (*ServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (*UnimplementedAppchainPluginServer) GetChainID(ctx context.Context, req *Empty) (*ChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainID not implemented")
}
func (*UnimplementedAppchainPluginServer) GetAppchainInfo(ctx context.Context, req *ChainInfoRequest) (*ChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppchainInfo not implemented")
}
func (*UnimplementedAppchainPluginServer) GetDirectTransactionMeta(ctx context.Context, req *DirectTransactionMetaRequest) (*DirectTransactionMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectTransactionMeta not implemented")
}
func (*UnimplementedAppchainPluginServer) Name(ctx context.Context, req *Empty) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (*UnimplementedAppchainPluginServer) Type(ctx context.Context, req *Empty) (*TypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Type not implemented")
}
func (*UnimplementedAppchainPluginServer) GetOffChainData(ctx context.Context, req *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffChainData not implemented")
}
func (*UnimplementedAppchainPluginServer) GetOffChainDataReq(req *Empty, srv AppchainPlugin_GetOffChainDataReqServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOffChainDataReq not implemented")
}
func (*UnimplementedAppchainPluginServer) SubmitOffChainData(ctx context.Context, req *GetDataResponse) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOffChainData not implemented")
}

func RegisterAppchainPluginServer(s *grpc.Server, srv AppchainPluginServer) {
	s.RegisterService(&_AppchainPlugin_serviceDesc, srv)
}

func _AppchainPlugin_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).Start(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetIBTPCh_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppchainPluginServer).GetIBTPCh(m, &appchainPluginGetIBTPChServer{stream})
}

type AppchainPlugin_GetIBTPChServer interface {
	Send(*IBTP) error
	grpc.ServerStream
}

type appchainPluginGetIBTPChServer struct {
	grpc.ServerStream
}

func (x *appchainPluginGetIBTPChServer) Send(m *IBTP) error {
	return x.ServerStream.SendMsg(m)
}

func _AppchainPlugin_GetUpdateMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppchainPluginServer).GetUpdateMeta(m, &appchainPluginGetUpdateMetaServer{stream})
}

type AppchainPlugin_GetUpdateMetaServer interface {
	Send(*UpdateMeta) error
	grpc.ServerStream
}

type appchainPluginGetUpdateMetaServer struct {
	grpc.ServerStream
}

func (x *appchainPluginGetUpdateMetaServer) Send(m *UpdateMeta) error {
	return x.ServerStream.SendMsg(m)
}

func _AppchainPlugin_SubmitIBTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitIBTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).SubmitIBTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/SubmitIBTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).SubmitIBTP(ctx, req.(*SubmitIBTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_SubmitIBTPBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitIBTPRequestBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).SubmitIBTPBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/SubmitIBTPBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).SubmitIBTPBatch(ctx, req.(*SubmitIBTPRequestBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_SubmitReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).SubmitReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/SubmitReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).SubmitReceipt(ctx, req.(*SubmitReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_SubmitReceiptBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitReceiptRequestBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).SubmitReceiptBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/SubmitReceiptBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).SubmitReceiptBatch(ctx, req.(*SubmitReceiptRequestBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetOutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetOutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetOutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetOutMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetReceiptMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetReceiptMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetReceiptMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetReceiptMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetInMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetInMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetInMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetInMeta(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetOutMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetOutMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetOutMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetOutMeta(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetCallbackMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetCallbackMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetCallbackMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetCallbackMeta(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetDstRollbackMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetDstRollbackMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetDstRollbackMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetDstRollbackMeta(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetServices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetChainID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetAppchainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetAppchainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetAppchainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetAppchainInfo(ctx, req.(*ChainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetDirectTransactionMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectTransactionMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetDirectTransactionMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetDirectTransactionMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetDirectTransactionMeta(ctx, req.(*DirectTransactionMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).Name(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_Type_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).Type(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/Type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).Type(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetOffChainData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).GetOffChainData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/GetOffChainData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).GetOffChainData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppchainPlugin_GetOffChainDataReq_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppchainPluginServer).GetOffChainDataReq(m, &appchainPluginGetOffChainDataReqServer{stream})
}

type AppchainPlugin_GetOffChainDataReqServer interface {
	Send(*GetDataRequest) error
	grpc.ServerStream
}

type appchainPluginGetOffChainDataReqServer struct {
	grpc.ServerStream
}

func (x *appchainPluginGetOffChainDataReqServer) Send(m *GetDataRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _AppchainPlugin_SubmitOffChainData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppchainPluginServer).SubmitOffChainData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AppchainPlugin/SubmitOffChainData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppchainPluginServer).SubmitOffChainData(ctx, req.(*GetDataResponse))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppchainPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AppchainPlugin",
	HandlerType: (*AppchainPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _AppchainPlugin_Initialize_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _AppchainPlugin_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _AppchainPlugin_Stop_Handler,
		},
		{
			MethodName: "SubmitIBTP",
			Handler:    _AppchainPlugin_SubmitIBTP_Handler,
		},
		{
			MethodName: "SubmitIBTPBatch",
			Handler:    _AppchainPlugin_SubmitIBTPBatch_Handler,
		},
		{
			MethodName: "SubmitReceipt",
			Handler:    _AppchainPlugin_SubmitReceipt_Handler,
		},
		{
			MethodName: "SubmitReceiptBatch",
			Handler:    _AppchainPlugin_SubmitReceiptBatch_Handler,
		},
		{
			MethodName: "GetOutMessage",
			Handler:    _AppchainPlugin_GetOutMessage_Handler,
		},
		{
			MethodName: "GetReceiptMessage",
			Handler:    _AppchainPlugin_GetReceiptMessage_Handler,
		},
		{
			MethodName: "GetInMeta",
			Handler:    _AppchainPlugin_GetInMeta_Handler,
		},
		{
			MethodName: "GetOutMeta",
			Handler:    _AppchainPlugin_GetOutMeta_Handler,
		},
		{
			MethodName: "GetCallbackMeta",
			Handler:    _AppchainPlugin_GetCallbackMeta_Handler,
		},
		{
			MethodName: "GetDstRollbackMeta",
			Handler:    _AppchainPlugin_GetDstRollbackMeta_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _AppchainPlugin_GetServices_Handler,
		},
		{
			MethodName: "GetChainID",
			Handler:    _AppchainPlugin_GetChainID_Handler,
		},
		{
			MethodName: "GetAppchainInfo",
			Handler:    _AppchainPlugin_GetAppchainInfo_Handler,
		},
		{
			MethodName: "GetDirectTransactionMeta",
			Handler:    _AppchainPlugin_GetDirectTransactionMeta_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _AppchainPlugin_Name_Handler,
		},
		{
			MethodName: "Type",
			Handler:    _AppchainPlugin_Type_Handler,
		},
		{
			MethodName: "GetOffChainData",
			Handler:    _AppchainPlugin_GetOffChainData_Handler,
		},
		{
			MethodName: "SubmitOffChainData",
			Handler:    _AppchainPlugin_SubmitOffChainData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIBTPCh",
			Handler:       _AppchainPlugin_GetIBTPCh_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUpdateMeta",
			Handler:       _AppchainPlugin_GetUpdateMeta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOffChainDataReq",
			Handler:       _AppchainPlugin_GetOffChainDataReq_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InitializeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitializeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitializeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConfigPath) > 0 {
		i -= len(m.ConfigPath)
		copy(dAtA[i:], m.ConfigPath)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.ConfigPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitIBTPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitIBTPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitIBTPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitIBTPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitIBTPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitIBTPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEncrypted {
		i--
		if m.IsEncrypted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.BxhProof != nil {
		{
			size, err := m.BxhProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServiceId) > 0 {
		i -= len(m.ServiceId)
		copy(dAtA[i:], m.ServiceId)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.ServiceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitIBTPRequestBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitIBTPRequestBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitIBTPRequestBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IsEncrypted) > 0 {
		for iNdEx := len(m.IsEncrypted) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.IsEncrypted[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.IsEncrypted)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BxhProof) > 0 {
		for iNdEx := len(m.BxhProof) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BxhProof[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlugin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Content) > 0 {
		for iNdEx := len(m.Content) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Content[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlugin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Type) > 0 {
		dAtA5 := make([]byte, len(m.Type)*10)
		var j4 int
		for _, num := range m.Type {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintPlugin(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceId) > 0 {
		for iNdEx := len(m.ServiceId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceId[iNdEx])
			copy(dAtA[i:], m.ServiceId[iNdEx])
			i = encodeVarintPlugin(dAtA, i, uint64(len(m.ServiceId[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Index) > 0 {
		dAtA7 := make([]byte, len(m.Index)*10)
		var j6 int
		for _, num := range m.Index {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintPlugin(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		for iNdEx := len(m.From) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.From[iNdEx])
			copy(dAtA[i:], m.From[iNdEx])
			i = encodeVarintPlugin(dAtA, i, uint64(len(m.From[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubmitReceiptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitReceiptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitReceiptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BxhProof != nil {
		{
			size, err := m.BxhProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlugin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServiceId) > 0 {
		i -= len(m.ServiceId)
		copy(dAtA[i:], m.ServiceId)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.ServiceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitReceiptRequestBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitReceiptRequestBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitReceiptRequestBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BxhProof) > 0 {
		for iNdEx := len(m.BxhProof) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BxhProof[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlugin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlugin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Type) > 0 {
		dAtA11 := make([]byte, len(m.Type)*10)
		var j10 int
		for _, num := range m.Type {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintPlugin(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceId) > 0 {
		for iNdEx := len(m.ServiceId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceId[iNdEx])
			copy(dAtA[i:], m.ServiceId[iNdEx])
			i = encodeVarintPlugin(dAtA, i, uint64(len(m.ServiceId[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Index) > 0 {
		dAtA13 := make([]byte, len(m.Index)*10)
		var j12 int
		for _, num := range m.Index {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintPlugin(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x12
	}
	if len(m.To) > 0 {
		for iNdEx := len(m.To) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.To[iNdEx])
			copy(dAtA[i:], m.To[iNdEx])
			i = encodeVarintPlugin(dAtA, i, uint64(len(m.To[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFilterLockStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFilterLockStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFilterLockStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppchainIndex != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.AppchainIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFilterLockStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFilterLockStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFilterLockStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockStart != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.LockStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Idx != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServicePair) > 0 {
		i -= len(m.ServicePair)
		copy(dAtA[i:], m.ServicePair)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.ServicePair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Meta) > 0 {
		for k := range m.Meta {
			v := m.Meta[k]
			baseI := i
			i = encodeVarintPlugin(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPlugin(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPlugin(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		for iNdEx := len(m.Service) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Service[iNdEx])
			copy(dAtA[i:], m.Service[iNdEx])
			i = encodeVarintPlugin(dAtA, i, uint64(len(m.Service[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppchainID) > 0 {
		i -= len(m.AppchainID)
		copy(dAtA[i:], m.AppchainID)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.AppchainID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BxhID) > 0 {
		i -= len(m.BxhID)
		copy(dAtA[i:], m.BxhID)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.BxhID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectTransactionMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectTransactionMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectTransactionMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IBTPid) > 0 {
		i -= len(m.IBTPid)
		copy(dAtA[i:], m.IBTPid)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.IBTPid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuleAddr) > 0 {
		i -= len(m.RuleAddr)
		copy(dAtA[i:], m.RuleAddr)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.RuleAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TrustedRoot) > 0 {
		i -= len(m.TrustedRoot)
		copy(dAtA[i:], m.TrustedRoot)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.TrustedRoot)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Broker) > 0 {
		i -= len(m.Broker)
		copy(dAtA[i:], m.Broker)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Broker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectTransactionMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectTransactionMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectTransactionMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransactionStatus != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.TransactionStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeoutPeriod != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.TimeoutPeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTimestamp != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.StartTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.AppchainIndex != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.AppchainIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receipt) > 0 {
		i -= len(m.Receipt)
		copy(dAtA[i:], m.Receipt)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Receipt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnLock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnLock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MultiSigns) > 0 {
		for iNdEx := len(m.MultiSigns) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MultiSigns[iNdEx])
			copy(dAtA[i:], m.MultiSigns[iNdEx])
			i = encodeVarintPlugin(dAtA, i, uint64(len(m.MultiSigns[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.RelayIndex != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.RelayIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Receipt) > 0 {
		i -= len(m.Receipt)
		copy(dAtA[i:], m.Receipt)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Receipt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPlugin(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRelayIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRelayIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRelayIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelayIndex != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.RelayIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAppchainIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAppchainIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAppchainIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppchainIndex != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.AppchainIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockEventByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockEventByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockEventByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintPlugin(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlugin(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlugin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InitializeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigPath)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *SubmitIBTPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *SubmitIBTPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovPlugin(uint64(m.Index))
	}
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPlugin(uint64(m.Type))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.BxhProof != nil {
		l = m.BxhProof.Size()
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.IsEncrypted {
		n += 2
	}
	return n
}

func (m *SubmitIBTPRequestBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.From) > 0 {
		for _, s := range m.From {
			l = len(s)
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if len(m.Index) > 0 {
		l = 0
		for _, e := range m.Index {
			l += sovPlugin(uint64(e))
		}
		n += 1 + sovPlugin(uint64(l)) + l
	}
	if len(m.ServiceId) > 0 {
		for _, s := range m.ServiceId {
			l = len(s)
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovPlugin(uint64(e))
		}
		n += 1 + sovPlugin(uint64(l)) + l
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if len(m.BxhProof) > 0 {
		for _, e := range m.BxhProof {
			l = e.Size()
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if len(m.IsEncrypted) > 0 {
		n += 1 + sovPlugin(uint64(len(m.IsEncrypted))) + len(m.IsEncrypted)*1
	}
	return n
}

func (m *SubmitReceiptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovPlugin(uint64(m.Index))
	}
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPlugin(uint64(m.Type))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.BxhProof != nil {
		l = m.BxhProof.Size()
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *SubmitReceiptRequestBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if len(m.Index) > 0 {
		l = 0
		for _, e := range m.Index {
			l += sovPlugin(uint64(e))
		}
		n += 1 + sovPlugin(uint64(l)) + l
	}
	if len(m.ServiceId) > 0 {
		for _, s := range m.ServiceId {
			l = len(s)
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovPlugin(uint64(e))
		}
		n += 1 + sovPlugin(uint64(l)) + l
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	if len(m.BxhProof) > 0 {
		for _, e := range m.BxhProof {
			l = e.Size()
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	return n
}

func (m *QueryFilterLockStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppchainIndex != 0 {
		n += 1 + sovPlugin(uint64(m.AppchainIndex))
	}
	return n
}

func (m *QueryFilterLockStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockStart != 0 {
		n += 1 + sovPlugin(uint64(m.LockStart))
	}
	return n
}

func (m *GetMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServicePair)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.Idx != 0 {
		n += 1 + sovPlugin(uint64(m.Idx))
	}
	return n
}

func (m *GetMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPlugin(uint64(len(k))) + 1 + sovPlugin(uint64(v))
			n += mapEntrySize + 1 + sovPlugin(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ServicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Service) > 0 {
		for _, s := range m.Service {
			l = len(s)
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	return n
}

func (m *ChainIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BxhID)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.AppchainID)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *ChainInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *DirectTransactionMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IBTPid)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *ChainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Broker)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.TrustedRoot)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.RuleAddr)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *DirectTransactionMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTimestamp != 0 {
		n += 1 + sovPlugin(uint64(m.StartTimestamp))
	}
	if m.TimeoutPeriod != 0 {
		n += 1 + sovPlugin(uint64(m.TimeoutPeriod))
	}
	if m.TransactionStatus != 0 {
		n += 1 + sovPlugin(uint64(m.TransactionStatus))
	}
	return n
}

func (m *NameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *TypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *LockEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receipt)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.AppchainIndex != 0 {
		n += 1 + sovPlugin(uint64(m.AppchainIndex))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovPlugin(uint64(m.BlockNumber))
	}
	return n
}

func (m *UpdateMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	return n
}

func (m *UnLock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Receipt)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovPlugin(uint64(l))
	}
	if m.RelayIndex != 0 {
		n += 1 + sovPlugin(uint64(m.RelayIndex))
	}
	if len(m.MultiSigns) > 0 {
		for _, b := range m.MultiSigns {
			l = len(b)
			n += 1 + l + sovPlugin(uint64(l))
		}
	}
	return n
}

func (m *QueryRelayIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelayIndex != 0 {
		n += 1 + sovPlugin(uint64(m.RelayIndex))
	}
	return n
}

func (m *QueryAppchainIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppchainIndex != 0 {
		n += 1 + sovPlugin(uint64(m.AppchainIndex))
	}
	return n
}

func (m *QueryLockEventByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovPlugin(uint64(m.Index))
	}
	return n
}

func sovPlugin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlugin(x uint64) (n int) {
	return sovPlugin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitializeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitIBTPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitIBTPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitIBTPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &IBTP{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitIBTPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitIBTPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitIBTPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= IBTP_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BxhProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BxhProof == nil {
				m.BxhProof = &BxhProof{}
			}
			if err := m.BxhProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEncrypted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEncrypted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitIBTPRequestBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitIBTPRequestBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitIBTPRequestBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Index = append(m.Index, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlugin
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlugin
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Index) == 0 {
					m.Index = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Index = append(m.Index, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = append(m.ServiceId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v IBTP_Type
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= IBTP_Type(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlugin
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlugin
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]IBTP_Type, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v IBTP_Type
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= IBTP_Type(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &Content{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BxhProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BxhProof = append(m.BxhProof, &BxhProof{})
			if err := m.BxhProof[len(m.BxhProof)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IsEncrypted = append(m.IsEncrypted, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlugin
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlugin
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.IsEncrypted) == 0 {
					m.IsEncrypted = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IsEncrypted = append(m.IsEncrypted, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEncrypted", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitReceiptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitReceiptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitReceiptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= IBTP_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BxhProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BxhProof == nil {
				m.BxhProof = &BxhProof{}
			}
			if err := m.BxhProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitReceiptRequestBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitReceiptRequestBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitReceiptRequestBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Index = append(m.Index, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlugin
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlugin
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Index) == 0 {
					m.Index = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Index = append(m.Index, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = append(m.ServiceId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v IBTP_Type
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= IBTP_Type(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlugin
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlugin
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]IBTP_Type, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v IBTP_Type
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= IBTP_Type(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &Result{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BxhProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BxhProof = append(m.BxhProof, &BxhProof{})
			if err := m.BxhProof[len(m.BxhProof)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFilterLockStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFilterLockStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFilterLockStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppchainIndex", wireType)
			}
			m.AppchainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppchainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFilterLockStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFilterLockStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFilterLockStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockStart", wireType)
			}
			m.LockStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockStart |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlugin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPlugin
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPlugin
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlugin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPlugin(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPlugin
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = append(m.Service, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BxhID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BxhID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppchainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppchainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectTransactionMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectTransactionMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectTransactionMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IBTPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IBTPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Broker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedRoot = append(m.TrustedRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TrustedRoot == nil {
				m.TrustedRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectTransactionMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectTransactionMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectTransactionMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutPeriod", wireType)
			}
			m.TimeoutPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionStatus", wireType)
			}
			m.TransactionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = append(m.Receipt[:0], dAtA[iNdEx:postIndex]...)
			if m.Receipt == nil {
				m.Receipt = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppchainIndex", wireType)
			}
			m.AppchainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppchainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayIndex", wireType)
			}
			m.RelayIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiSigns", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlugin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlugin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiSigns = append(m.MultiSigns, make([]byte, postIndex-iNdEx))
			copy(m.MultiSigns[len(m.MultiSigns)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRelayIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRelayIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRelayIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayIndex", wireType)
			}
			m.RelayIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAppchainIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAppchainIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAppchainIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppchainIndex", wireType)
			}
			m.AppchainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppchainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockEventByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockEventByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockEventByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlugin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlugin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlugin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlugin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlugin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlugin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlugin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlugin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlugin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlugin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlugin = fmt.Errorf("proto: unexpected end of group")
)
